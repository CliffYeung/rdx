
 1. do "perldoc rdx_pat.man" to see the man page

 2. do "./rdx_pat.mk" to do the default builds.  there are three test builds with different defines:
    a. 8 nodes, 3 keys, 4 bytes per key
    b. 1 nodes, 1 keys, 1 bytes per key
    c. 500 nodes, 5 keys, 12 bytes per key

 3. edit rdx_pat_search?.h - change the following lines:

       /* maximum number of data nodes stored in rdx trie */
       #define MAX_NUM_RDX_NODES  8

       /* number of rdx search keys */
       #define NUM_KEYS           3

       /* number of bytes in each key(s) */
       #define NUM_KEY_BYTES      4

 4. do "./rdx_pat.mk" again to build and test with your own MAX_NUM_RDX_NODES, NUM_KEYS, NUM_KEY_BYTES values

 5. do "./rdx_pat.mk clean" to clean the directory

 6. the test code is identical for all three test runs.  some tests are not run in case 'b' above
    because of too few nodes.

 7. all tests should run with gcc, clang or g++.  the g++ run gives warnings about being compiled
    with -std=c11 set.  this is ok.

 8. Performance
    Actual measurements are the best measure of performance.  The rdx_pat_perf program is provided.
    rdx_pat_perf has two modes: repeated insertion(fill trie)/deletion(empty trie)(mode 1 - default)
    and repeated search(mode 2).  There are three cmd line options: rdx_pat_perf [-cn] [-sn] [-bn]
    with defaults -c1 -s60 -b500.  The options are:
        -cn - mode
        -sn - minimum seconds to run
        -bn - block multiplier:
                  a. mode 1 - the trie is filled then emtied * block multiplier times
                  b. mode 2 - the trie is filled then searched for MAX_NUM_RDX_NODES nodes *
                              block multiplier times
              then an elapsed time measurement is made and compared against the -sn minimum time
              to run.  the block multiplier is used to adjust the granularity of elapsed time
              calculations - allowing the minimization of time calculation cpu usage.
    The output is appended to rdx_pat_perf.results.

    The size of the trie used by rdx_pat_perf is set by editing rdx_pat_search_perf.h and setting
    MAX_NUM_RDX_NODES(5000 default), NUM_KEYS(8 default) and NUM_KEY_BYTES(32 default).
    rdx_pat_perf.c, rdx_pat_search_perf.c and rdx_pat_search_perf.h are compiled for the executable.

    The rdx_pat_initialize(), rdx_pat_sort(), rdx_pat_nodes(), rdx_pat_print() and rdx_pat_verify()
    routines are not relevant for performance measurements.

    If other modes of insert/delete/search are deemed of interest then these will be added.

